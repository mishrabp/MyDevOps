##Question-1
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: log-volume
spec:
  capacity:
    storage: 1Gi
  accessModes:
  - ReadWriteMany
  storageClassName: manual
  hostPath:
    path: /opt/volume/nginx
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - controlplane
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: log-claim
spec:
  accessModes:
    - ReadWriteMany
  volumeName: log-volume
  resources:
    requests:
      storage: 200Mi
  storageClassName: manual
---

apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: logger
  name: logger
spec:
  containers:
  - image: nginx:alpine
    name: logger
    volumeMounts:
            - name: mnt
              mountPath: /var/www/nginx
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
  volumes:
          - name: mnt
            persistentVolumeClaim:
              claimName: log-claim
status: {}

##Question-2
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: "2022-05-17T11:23:23Z"
  generation: 2
  name: default-deny
  namespace: default
  resourceVersion: "3155"
  uid: 59d17899-2c3a-4dd6-b947-0104992a00e9
spec:
  egress:
  - {}
  ingress:
  - {}
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress

##Question-3
---
#k create configmap time-config --from-literal TIME_FREQ=10
#mkdir /opt/time
apiVersion: v1
kind: Pod
metadata:
  namespace: dvl1987
  labels:
    run: time-check
  name: time-check
spec:
  containers:
  - image: busybox
    name: time-check
    resources: {}
    command: ["/bin/sh"]
    args: ["-c", "while true; do date >> /opt/time/time-check.log; sleep $TIME_FREQ;done"]
    env:
            - name: TIME_FREQ
              valueFrom:
                configMapKeyRef:
                        name: time-config
                        key: TIME_FREQ
    volumeMounts:
            - name: mnt2
              mountPath: /opt/time
  dnsPolicy: ClusterFirst
  restartPolicy: Always
  volumes:
          - name: mnt2
            hostPath:
                    path: /opt/time
                    type: Directory
status: {}

##Question-4
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nginx-deploy
  name: nginx-deploy
spec:
  replicas: 4
  selector:
    matchLabels:
      app: nginx-deploy
  strategy:
    type: RollingUpdate
    rollingUpdate:
            maxSurge: 1
            maxUnavailable: 2
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: nginx-deploy
    spec:
      containers:
      - image: nginx:1.16
        name: nginx
        resources: {}
status: {}

##Question#5
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: redis
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: redis
    spec:
      containers:
      - image: redis:alpine
        name: redis
        volumeMounts:
                - name: data
                  mountPath: /redis-master-data
                - name: redis-config
                  mountPath: /redis-master
        ports:
                - containerPort: 6379
        resources:
                requests:
                  cpu: "0.2"
      volumes:
      - name: data
        emptyDir: {}
      - name: redis-config
        configMap:
          name: redis-config


